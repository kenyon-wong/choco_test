name: Download and Package Chocolatey Packages

on: 
  workflow_dispatch:
    inputs:
      package_list:
        description: 'Custom package list (comma-separated)'
        required: false
        default: ''
      retention_days:
        description: 'Artifact retention days'
        required: false
        default: '7'
        type: number

env:
  CHOCO_LIB_DIR: C:\ProgramData\chocolatey\lib
  CHOCO_CACHE_DIR: C:\ProgramData\chocolatey\cache

jobs:
  download-packages:
    runs-on: windows-latest
    timeout-minutes: 90
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PowerShell execution policy
        run: Set-ExecutionPolicy Bypass -Scope Process -Force
        shell: powershell

      - name: Install Chocolatey
        run: |
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
            Write-Host "Installing Chocolatey..."
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          } else {
            Write-Host "Chocolatey already installed"
          }
          choco --version
          refreshenv
        shell: powershell

      - name: Configure Chocolatey
        run: |
          choco feature enable -n allowGlobalConfirmation
          choco config set commandExecutionTimeoutSeconds 14400
        shell: powershell

      - name: Download Core Extensions
        run: |
          $packages = @(
            'choco-cleaner',
            'chocolatey-compatibility.extension',
            'chocolatey-core.extension',
            'chocolatey-dotnetfx.extension',
            'chocolatey-fastanswers.extension',
            'chocolatey-visualstudio.extension',
            'chocolatey-windowsupdate.extension'
          )
          
          foreach ($package in $packages) {
            Write-Host "Downloading $package..." -ForegroundColor Yellow
            try {
              choco install $package --download-only --no-progress --force -y
              Write-Host "✓ Successfully downloaded $package" -ForegroundColor Green
            } catch {
              Write-Warning "✗ Failed to download $package`: $_"
            }
          }
        shell: powershell

      - name: Download Utility Packages
        run: |
          $packages = @(
            '7zip',
            '7zip-zstd',
            'bandizip',
            'Everything',
            'Firefox'
          )
          
          foreach ($package in $packages) {
            Write-Host "Downloading $package..." -ForegroundColor Yellow
            try {
              choco install $package --download-only --no-progress --force -y
              Write-Host "✓ Successfully downloaded $package" -ForegroundColor Green
            } catch {
              Write-Warning "✗ Failed to download $package`: $_"
            }
          }
        shell: powershell

      - name: Download .NET Packages
        run: |
          $packages = @(
            'DotNet3.5',
            'DotNet4.5.2',
            'dotnet-6.0-runtime',
            'dotnetfx',
            'vcredist140',
            'vcredist2015'
          )
          
          foreach ($package in $packages) {
            Write-Host "Downloading $package..." -ForegroundColor Yellow
            try {
              choco install $package --download-only --no-progress --force -y
              Write-Host "✓ Successfully downloaded $package" -ForegroundColor Green
            } catch {
              Write-Warning "✗ Failed to download $package`: $_"
            }
          }
        shell: powershell

      - name: Download System Updates
        run: |
          $packages = @(
            'KB2919355',
            'KB2919442',
            'KB2999226',
            'KB3033929',
            'KB3035131',
            'KB3063858'
          )
          
          foreach ($package in $packages) {
            Write-Host "Downloading $package..." -ForegroundColor Yellow
            try {
              choco install $package --download-only --no-progress --force -y
              Write-Host "✓ Successfully downloaded $package" -ForegroundColor Green
            } catch {
              Write-Warning "✗ Failed to download $package`: $_"
            }
          }
        shell: powershell

      - name: Download Additional Tools
        run: |
          $packages = @(
            'feroxbuster',
            'mysql-cli',
            'redis-desktop-manager',
            'ssh-copy-id',
            'veracrypt'
          )
          
          foreach ($package in $packages) {
            Write-Host "Downloading $package..." -ForegroundColor Yellow
            try {
              choco install $package --download-only --no-progress --force -y
              Write-Host "✓ Successfully downloaded $package" -ForegroundColor Green
            } catch {
              Write-Warning "✗ Failed to download $package`: $_"
            }
          }
        shell: powershell

      - name: Download custom packages (if specified)
        if: ${{ github.event.inputs.package_list != '' }}
        run: |
          $customPackages = "${{ github.event.inputs.package_list }}" -split ','
          foreach ($package in $customPackages) {
            $package = $package.Trim()
            if ($package) {
              Write-Host "Downloading custom package: $package..." -ForegroundColor Yellow
              try {
                choco install $package --download-only --no-progress --force -y
                Write-Host "✓ Successfully downloaded custom package $package" -ForegroundColor Green
              } catch {
                Write-Warning "✗ Failed to download custom package $package`: $_"
              }
            }
          }
        shell: powershell

      - name: Collect downloaded packages
        run: |
          Write-Host "Collecting downloaded packages..." -ForegroundColor Cyan
          
          # 创建输出目录
          $outputDir = "${{ github.workspace }}\collected-packages"
          New-Item -ItemType Directory -Force -Path $outputDir
          
          # 收集 lib 目录中的包
          if (Test-Path "$env:CHOCO_LIB_DIR") {
            Write-Host "Copying packages from lib directory..."
            Copy-Item -Path "$env:CHOCO_LIB_DIR\*" -Destination $outputDir -Recurse -Force
          }
          
          # 收集 cache 目录中的 nupkg 文件
          if (Test-Path "$env:CHOCO_CACHE_DIR") {
            Write-Host "Copying nupkg files from cache directory..."
            Get-ChildItem -Path "$env:CHOCO_CACHE_DIR" -Filter "*.nupkg" -Recurse | ForEach-Object {
              Copy-Item -Path $_.FullName -Destination $outputDir -Force
            }
          }
          
          # 检查 chocolatey 安装目录下的其他可能位置
          $chocoRoot = Split-Path $env:ChocolateyInstall -Parent
          if (Test-Path "$chocoRoot\chocolatey") {
            Get-ChildItem -Path "$chocoRoot\chocolatey" -Filter "*.nupkg" -Recurse | ForEach-Object {
              Copy-Item -Path $_.FullName -Destination $outputDir -Force
            }
          }
        shell: powershell

      - name: Generate package inventory
        run: |
          $outputDir = "${{ github.workspace }}\collected-packages"
          $inventory = @()
          
          Get-ChildItem $outputDir -Recurse -File | ForEach-Object {
            $inventory += [PSCustomObject]@{
              Name = $_.Name
              Size = "{0:N2} MB" -f ($_.Length / 1MB)
              SizeBytes = $_.Length
              Path = $_.FullName.Replace("$outputDir\", "")
              LastModified = $_.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")
              Extension = $_.Extension
            }
          }
          
          # 保存详细清单
          $inventory | ConvertTo-Json -Depth 2 | Out-File "$outputDir\inventory.json" -Encoding UTF8
          
          # 生成摘要
          $summary = @{
            TotalFiles = $inventory.Count
            TotalSizeMB = [math]::Round(($inventory | Measure-Object -Property SizeBytes -Sum).Sum / 1MB, 2)
            NupkgFiles = ($inventory | Where-Object { $_.Extension -eq ".nupkg" }).Count
            GeneratedAt = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss UTC")
            Packages = ($inventory | Where-Object { $_.Extension -eq ".nupkg" } | Select-Object Name, Size | Sort-Object Name)
          }
          
          $summary | ConvertTo-Json -Depth 3 | Out-File "$outputDir\summary.json" -Encoding UTF8
          
          Write-Host "=== Package Inventory ===" -ForegroundColor Green
          Write-Host "Total files: $($summary.TotalFiles)"
          Write-Host "Total size: $($summary.TotalSizeMB) MB"
          Write-Host "Nupkg files: $($summary.NupkgFiles)"
          
          if ($summary.Packages.Count -gt 0) {
            Write-Host "`nDownloaded packages:" -ForegroundColor Cyan
            $summary.Packages | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Size))" }
          }
        shell: powershell

      - name: Create compressed archive
        run: |
          $outputDir = "${{ github.workspace }}\collected-packages"
          $archivePath = "${{ github.workspace }}\chocolatey-packages.zip"
          
          Write-Host "Creating compressed archive..." -ForegroundColor Cyan
          
          # 使用 PowerShell 内置压缩
          Compress-Archive -Path "$outputDir\*" -DestinationPath $archivePath -CompressionLevel Optimal -Force
          
          if (Test-Path $archivePath) {
            $archiveSize = (Get-Item $archivePath).Length
            $archiveSizeMB = [math]::Round($archiveSize / 1MB, 2)
            Write-Host "✓ Archive created successfully: $archiveSizeMB MB" -ForegroundColor Green
          } else {
            Write-Error "Failed to create archive"
          }
        shell: powershell

      - name: Upload packages artifact
        uses: actions/upload-artifact@v4
        with:
          name: chocolatey-offline-packages-${{ github.run_number }}
          path: |
            ${{ github.workspace }}\chocolatey-packages.zip
            ${{ github.workspace }}\collected-packages\summary.json
            ${{ github.workspace }}\collected-packages\inventory.json
          retention-days: ${{ github.event.inputs.retention_days || 7 }}
          compression-level: 6

      - name: Display final summary
        run: |
          Write-Host "=== Final Summary ===" -ForegroundColor Green
          
          $outputDir = "${{ github.workspace }}\collected-packages"
          $archivePath = "${{ github.workspace }}\chocolatey-packages.zip"
          
          if (Test-Path "$outputDir\summary.json") {
            $summary = Get-Content "$outputDir\summary.json" | ConvertFrom-Json
            Write-Host "Total packages collected: $($summary.NupkgFiles)"
            Write-Host "Total content size: $($summary.TotalSizeMB) MB"
          }
          
          if (Test-Path $archivePath) {
            $archiveSize = [math]::Round((Get-Item $archivePath).Length / 1MB, 2)
            Write-Host "Archive size: $archiveSize MB"
            Write-Host "Archive location: $archivePath"
          }
          
          Write-Host "`n✓ Workflow completed successfully!" -ForegroundColor Green
          Write-Host "You can download the artifact from the Actions tab." -ForegroundColor Yellow
        shell: powershell
